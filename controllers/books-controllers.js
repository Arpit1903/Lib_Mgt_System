const {UserModel, BookModel} = require("../models/index");
const IssuedBook = require("../DTOs/book-dto");

const getAllBooks = async(req, res) =>{
    const books = await BookModel.find();   //or BookModel.findAll();

    if(books.length === 0) return res.status(404).json({
        success: false,
        message: "No book found!!"
    })

    res.status(200).json({
        success: true,
        message: "These books are found!",
        data: books
    })
}

const getSingleBookById = async(req, res) =>{
    const {id} = req.params;
    const book = await BookModel.findById(id);

    if(!book){
        return res.status(404).json({
            success: false,
            message: "Book not found!!"
        })
    }

    return res.status(200).json({
        success: true,
        message: "Found the book!",
        data: book
    })
}
 
const getAllIssuedBooks = async(req, res) => {
    const user = UserModel.find({
        issuedBook: {$exists: true}      // here we're checking if the "issuedBook" attribute in the DataBase is "true" or not.
    }).populate("issuedBook");           // populate found books into "user"

    const issuedBooks = user.map((each) => new IssuedBook(each));

    if(issuedBooks.length === 0){
        return res.status(404).json({
            success: false,
            message: "No books issued!!"
        })
    }

    return res.status(200).json({
        success: true,
        message: "Found all issued books!",
        data: issuedBooks
    })
}

const addNewBook = async(req, res) => {
    const {data} = req.body;

    if(!data){
        return res.status(400).json({
            success: false,
            message: "No data to add new book!!"
        })
    }

    await BookModel.create(data);  // create attribute adds a new row in the table in DataBase.
    const allBooks = await BookModel.find();
    
    // if(book){      //This can be ignored in database, because id is generated by the DB itself and it can not be duplicate.
    //     return res.status(404).json({
    //         success: false,
    //         message: "book already exists!!"
    //     })
    // }

    return res.status(201).json({
        success: true,
        message: "new book added!",
        data: allBooks
    })
}

const updateBookById = async(req, res) => {
    const {id} = req.params;
    const {data} = req.body;

    const updatedBook = await BookModel.findOneAndUpdate({
        _id: id
    }, data, {
        new: true
    }); // new:find means if we use find method after an updation, the new update will be included.

    return res.status(200).json({ 
        success: true,
        message: "book updated!",
        data: updatedBook
    })
}

module.exports = {getAllBooks, getSingleBookById, getAllIssuedBooks, addNewBook, updateBookById}; //  (OR) exports.getAllBooks=()=>{}  while declaring getAllBooks.....similarly with all other functions.